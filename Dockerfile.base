# Optimized single-stage Dockerfile for Football Player Tracker
# GPU/CUDA support with minimal size

FROM nvidia/cuda:12.1.1-runtime-ubuntu22.04

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Install runtime system dependencies + minimal build tools for any packages that need compilation
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3 \
    python3-dev \
    python3-pip \
    python3-venv \
    git \
    wget \
    curl \
    build-essential \
    ffmpeg \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender1 \
    libgomp1 \
    libgl1-mesa-glx \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /var/cache/apt/* \
    && rm -rf /tmp/*

# Create virtual environment
RUN python3 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Set working directory
WORKDIR /app

# Copy dependency files
COPY pyproject.toml ./
COPY poetry.lock* ./
COPY uv.lock* ./

# Install core dependencies with GPU support
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --no-cache-dir \
    torch==2.5.0 torchvision==0.20.0 torchaudio==2.5.0 \
    --index-url https://download.pytorch.org/whl/cu121

# Install core dependencies from pyproject.toml
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --no-cache-dir \
    tracklab \
    #soccernet==0.1.55 \
    openmim==0.3.9 \
    lightning==2.0.9 \
    numpy \
    scikit-learn \
    lap \
    Cython \
    h5py \
    Pillow \
    six \
    scipy \
    matplotlib \
    tb-nightly \
    future \
    yacs \
    gdown \
    flake8 \
    yapf \
    isort==4.3.21 \
    imageio \
    chardet \
    tabulate \
    thop \
    seaborn

# Install computer vision and ML dependencies
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --no-cache-dir \
    opencv-python \
    ultralytics \
    supervision \
    inference \
    loguru

# Install TensorRT packages (GPU-optimized)
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --no-cache-dir \
    tensorrt-cu12==10.7 \
    tensorrt-cu12-bindings==10.7 \
    tensorrt-cu12-libs==10.7 \
    tensorrt-lean-cu12 \
    tensorrt-dispatch-cu12 \
    tensorrt==10.7

# Install ONNX dependencies
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --no-cache-dir \
    onnx \
    onnxruntime-gpu

# Install git dependencies (from pyproject.toml)
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --no-cache-dir "prtreid @ git+https://github.com/KirSerg64/prtreid"
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --no-cache-dir "torchreid @ git+https://github.com/VlSomers/bpbreid"

# Clean pip cache and remove build dependencies to reduce size
RUN apt-get remove -y build-essential python3-dev git wget curl && \
    apt-get autoremove -y && \
    rm -rf /var/lib/apt/lists/*

# Create app user
RUN groupadd -r appuser && useradd -r -g appuser -s /bin/false appuser

# Copy only essential application files
COPY --chown=appuser:appuser main_video_parallel.py ./
COPY --chown=appuser:appuser main.py ./
COPY --chown=appuser:appuser test_hello.py ./
COPY --chown=appuser:appuser sn_gamestate/ ./sn_gamestate/
COPY --chown=appuser:appuser plugins/calibration/ ./plugins/calibration/

# Copy only essential pretrained models (exclude large unnecessary ones)
COPY --chown=appuser:appuser pretrained_models/yolo/yolov11_A100_640_batch1_fp16_ultra.engine ./pretrained_models/yolo/
COPY --chown=appuser:appuser pretrained_models/reid/prtreid-onnx-opset20-simplified.onnx ./pretrained_models/reid/
COPY --chown=appuser:appuser pretrained_models/gta_link/sports_model.pth.tar-60 ./pretrained_models/gta_link/
COPY --chown=appuser:appuser pretrained_models/gta_link/feature_extractor_osnet_x1_0.onnx ./pretrained_models/gta_link/
COPY --chown=appuser:appuser pretrained_models/calibration/ ./pretrained_models/calibration/

# Install local packages without cache
RUN pip install --no-cache-dir --no-deps -e ./plugins/calibration
RUN pip install --no-cache-dir --no-deps -e .

# Create minimal directory structure and cleanup
RUN mkdir -p /app/data/input /app/data/output /app/logs /app/tmp && \
    chown -R appuser:appuser /app && \
    # Clean any remaining cache and unnecessary files
    find /opt/venv -name "*.pyc" -delete && \
    find /opt/venv -name "__pycache__" -exec rm -rf {} + && \
    rm -rf /opt/venv/lib/python*/site-packages/*/tests && \
    rm -rf /opt/venv/lib/python*/site-packages/*/.git* && \
    rm -rf /tmp/* /var/tmp/*

# Create startup script with GPU info
# RUN echo '#!/bin/bash\n\
# echo "Football Player Tracker (GPU-Optimized)"\n\
# echo "Python: $(python --version)"\n\
# echo "PyTorch: $(python -c \"import torch; print(torch.__version__)\" 2>/dev/null || echo \"Not available\")"\n\
# echo "CUDA Available: $(python -c \"import torch; print(torch.cuda.is_available())\" 2>/dev/null || echo \"False\")"\n\
# echo "GPU Count: $(python -c \"import torch; print(torch.cuda.device_count())\" 2>/dev/null || echo \"0\")"\n\
# if [ \"$CUDA_VISIBLE_DEVICES\" ]; then echo "CUDA Devices: $CUDA_VISIBLE_DEVICES"; fi\n\
# exec "$@"' > /app/entrypoint.sh && chmod +x /app/entrypoint.sh

# Switch to non-root user
USER appuser

# Set environment variables
ENV PYTHONPATH=/app
ENV HYDRA_FULL_ERROR=1
ENV CUDA_VISIBLE_DEVICES=0
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility

# Entrypoint and default command
# ENTRYPOINT ["/app/entrypoint.sh"]
CMD ["python", "test_hello.py"]
# CMD ["/bin/bash"]
# CMD ["nvidia-smi"]
